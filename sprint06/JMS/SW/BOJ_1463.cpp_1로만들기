#include <iostream>
#include <algorithm>
#include <cstring>
#include <queue>

using namespace std;

int N;
int arr[3000000] = { 0 };

void BFS() {
	queue<int> q;

	q.push(N);
	arr[N] = 0;

	while (!q.empty()) {
		int temp = q.front();
		q.pop();

		if (temp < 1)
			continue;
		else if (temp == 1)
			return;

		if (temp % 3 == 0 && (arr[temp / 3] == 0 || arr[temp] + 1 < arr[temp / 3])) {
			arr[temp / 3] = arr[temp] + 1;
			q.push(temp / 3);
		}
		if (temp % 2 == 0 && (arr[temp / 2] == 0 || arr[temp] + 1 < arr[temp / 2])) {
			arr[temp / 2] = arr[temp] + 1;
			q.push(temp / 2);
		}
		if (arr[temp - 1] == 0 || arr[temp] + 1 < arr[temp - 1]) {
			arr[temp -1] = arr[temp] + 1;
			q.push(temp -1);
		}
	}
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	cin >> N;

	BFS();
	cout << arr[1];
}
